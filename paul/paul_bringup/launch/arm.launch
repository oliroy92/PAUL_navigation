<?xml version="1.0"?>
<launch>
    <!-- ============================================== -->
    <!-- ================= PARAMETERS ================= -->
    <!-- ============================================== -->

    <!-- Setup parameters -->
    <arg name="sim" default="false"/>

    <!-- Kinova arm parameters -->
    <arg name="arm" default="gen3"/>

    <arg name="dof" value="6" if="$(eval arg('arm') == 'gen3')"/> 
    <arg name="dof" value="6" if="$(eval arg('arm') == 'gen3_lite')"/>

    <arg name="vision" value="true" if="$(eval arg('arm') == 'gen3')"/> 
    <arg name="vision" value="false" if="$(eval arg('arm') == 'gen3_lite')"/>

    <arg name="gripper" value="robotiq_2f_85" if="$(eval arg('arm') == 'gen3')"/> <!-- robotiq_2f_85 or robotiq_2f_140 -->
    <arg name="gripper" value="gen3_lite_2f" if="$(eval arg('arm') == 'gen3_lite')"/> 

    <arg name="use_hard_limits" value="false"/>

    <!-- Namespace -->
    <arg name="robot_name" default="my_$(arg arm)"/>
    <arg name="prefix" default=""/>

    <!-- Kortex API options -->
    <arg name="ip_address" value="192.168.2.10"/>
    <arg name="username" value="admin"/>
    <arg name="password" value="admin"/>
    <arg name="api_rpc_timeout_ms" value="2000"/> <!--milliseconds-->
    <arg name="api_session_inactivity_timeout_ms" value="35000"/> <!--milliseconds-->
    <arg name="api_connection_inactivity_timeout_ms" value="20000"/> <!--milliseconds-->

    <arg name="cyclic_data_publish_rate" value="40" if="$(arg sim)"/> <!--Hz-->
    <arg name="cyclic_data_publish_rate" value="100" unless="$(arg sim)"/> <!--Hz-->

    <!-- Action server params -->
    <arg name="default_goal_time_tolerance" value="0.5"/> <!--seconds-->
    <arg name="default_goal_tolerance" value="0.005"/> <!--radians-->

    <!-- Simulation parameters -->
    <arg name="simplified_world" default="true"/>

    <arg name="world" value="testbench_simplified" if="$(arg simplified_world)"/> 
    <arg name="world" value="testbench" unless="$(arg simplified_world)"/>

    <arg name="x0" value="0"/>
    <arg name="y0" value="0" if="$(arg simplified_world)"/> 
    <arg name="y0" value="0" unless="$(arg simplified_world)"/>
    <arg name="z0" value="0"/>

    <arg name="gazebo_gui" default="true"/>

    <arg name="start_delay_seconds" value="10"/>

    <!-- Automatically start other modules -->
    <arg name="start_rviz" default="true"/>
    <arg name="start_moveit" default="true"/>

    <!-- ============================================== -->
    <!-- ==================== MAIN ==================== -->
    <!-- ============================================== -->

    <!-- Start Gazebo outside of namespace -->
    <group if="$(arg sim)">
        <include file="$(find kortex_gazebo)/launch/start_gazebo.launch">
            <arg name="gui" value="$(arg gazebo_gui)"/>
            <arg name="use_sim_time" value="true"/>
            <arg name="paused" value="true"/>
        </include>
    </group>

    <group ns="$(arg robot_name)">

        <!-- Load the description for the robot -->
        <!-- Without gripper -->
        <param name="robot_description" command="$(find xacro)/xacro $(find kortex_description)/robots/$(arg arm).xacro dof:=$(arg dof) vision:=$(arg vision) sim:=$(arg sim) prefix:=$(arg prefix)"
            if="$(eval not arg('gripper'))"/>
        <!-- With gripper -->
        <param name="robot_description" command="$(find xacro)/xacro $(find kortex_description)/robots/$(arg arm)_$(arg gripper).xacro dof:=$(arg dof) vision:=$(arg vision) sim:=$(arg sim) prefix:=$(arg prefix)"
            unless="$(eval not arg('gripper'))"/>

        <!-- ============================================== -->
        <!-- ================= SIMULATION ================= -->
        <!-- ============================================== -->
        <group if="$(arg sim)">

            <!-- Spawn the robot in Gazebo -->
            <!-- <rosparam command="load" file="$(find kortex_description)/arms/$(arg arm)/$(arg dof)dof/config/gazebo_initial_joint_positions.yaml"/> -->
            <!-- <param name="initial_positions" value=""/> TODO -->
            <!-- Without gripper -->
            <node name="$(arg robot_name)_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
                args="-urdf -param robot_description -model $(arg robot_name) -x $(arg x0) -y $(arg y0) -z $(arg z0)
                    -robot_namespace $(arg robot_name)
                    -J $(arg prefix)joint_1 1.57
                    -J $(arg prefix)joint_2 0.35
                    -J $(arg prefix)joint_3 3.14
                    -J $(arg prefix)joint_4 -2.00
                    -J $(arg prefix)joint_5 0
                    -J $(arg prefix)joint_6 -1.00
                    -J $(arg prefix)joint_7 1.57"  
                if="$(eval not arg('gripper'))"/> <!--TODO-->
            <!-- With gripper -->
            <node name="$(arg robot_name)_spawner" pkg="gazebo_ros" type="spawn_model" respawn="false" output="screen"
            args="-urdf -param robot_description -model $(arg robot_name) -x $(arg x0) -y $(arg y0) -z $(arg z0)
                -robot_namespace $(arg robot_name)
                    -J $(arg prefix)joint_1 1.57
                    -J $(arg prefix)joint_2 0.35
                    -J $(arg prefix)joint_3 3.14
                    -J $(arg prefix)joint_4 -2.00
                    -J $(arg prefix)joint_5 0
                    -J $(arg prefix)joint_6 -1.00
                    -J $(arg prefix)joint_7 1.57"
            unless="$(eval not arg('gripper'))"/> <!--TODO-->

            <!-- Load controller configuration file from kortex_control package -->
            <rosparam file="$(find kortex_control)/arms/$(arg arm)/$(arg dof)dof/config/joint_position_controllers.yaml" command="load" subst_value="true"/>
            <rosparam file="$(find kortex_control)/grippers/$(arg gripper)/config/gripper_action_controller_parameters.yaml" command="load" subst_value="true"
                unless="$(eval not arg('gripper'))"/>

            <!-- Start the trajectory controllers -->
            <!-- Without gripper -->
            <node name="$(arg prefix)$(arg arm)_trajectory_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
                output="screen" args="$(arg prefix)$(arg arm)_joint_trajectory_controller $(arg prefix)joint_state_controller"
                if="$(eval not arg('gripper'))"/>

            <!-- With gripper -->
            <node name="$(arg prefix)$(arg arm)_controller_spawner" pkg="controller_manager" type="spawner" respawn="false"
                output="screen" args="$(arg prefix)$(arg arm)_joint_trajectory_controller $(arg prefix)joint_state_controller $(arg prefix)$(arg gripper)_gripper_controller"
                unless="$(eval not arg('gripper'))"/>

            <!-- Individual position controllers are stopped at first -->
            <!-- For 6 DOF arms -->
            <node name="$(arg prefix)$(arg arm)_position_controllers_spawner" pkg="controller_manager" type="spawner" respawn="false"
                output="screen" if="$(eval arg('dof') == 6)" args=" --stopped
                $(arg prefix)joint_1_position_controller
                $(arg prefix)joint_2_position_controller
                $(arg prefix)joint_3_position_controller
                $(arg prefix)joint_4_position_controller
                $(arg prefix)joint_5_position_controller
                $(arg prefix)joint_6_position_controller"/>
            <!-- For 7 DOF arms -->
            <node name="$(arg prefix)$(arg arm)_position_controllers_spawner" pkg="controller_manager" type="spawner" respawn="false"
                output="screen" if="$(eval arg('dof') == 7)" args=" --stopped
                $(arg prefix)joint_1_position_controller
                $(arg prefix)joint_2_position_controller
                $(arg prefix)joint_3_position_controller
                $(arg prefix)joint_4_position_controller
                $(arg prefix)joint_5_position_controller
                $(arg prefix)joint_6_position_controller
                $(arg prefix)joint_7_position_controller"/>

            <!-- Start simulated Kortex Driver -->
            <node name="$(arg robot_name)_driver" pkg="kortex_driver" type="kortex_arm_driver" output="screen"> <!--launch-prefix="gdb -ex run args"-->
                <param name="sim" value="true"/>
                <param name="cyclic_data_publish_rate" value="$(arg cyclic_data_publish_rate)"/>
                <param name="arm" value="$(arg arm)"/>
                <param name="gripper" value="$(arg gripper)"/>
                <param name="dof" value="$(arg dof)"/>
                <param name="robot_name" value="$(arg robot_name)"/>
                <param name="prefix" value="$(arg prefix)"/>
                <rosparam command="load" file="$(find kortex_description)/arms/$(arg arm)/$(arg dof)dof/config/joint_limits.yaml" subst_value="true"/>
                <rosparam command="load" file="$(find kortex_description)/arms/$(arg arm)/$(arg dof)dof/config/twist_limits.yaml" subst_value="true"/>
                <!-- If there is a gripper, load the active joint names for it -->
                <rosparam command="load" file="$(find kortex_description)/grippers/$(arg gripper)/config/joint_limits.yaml" unless="$(eval not arg('gripper'))" subst_value="true"/>
            </node>

            <!-- Start robot state publisher -->
            <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher"
            respawn="false" output="screen" />
        </group>

        <!-- ============================================== -->
        <!-- ================= REAL ROBOT ================= -->
        <!-- ============================================== -->
        <group unless="$(arg sim)">
            <!-- Start the kortex_driver node -->
            <node name="$(arg robot_name)_driver" pkg="kortex_driver" type="kortex_arm_driver" output="screen"> <!--launch-prefix="gdb -ex run args"-->
                <param name="sim" value="false"/>
                <param name="ip_address" value="$(arg ip_address)"/>
                <param name="username" value="$(arg username)"/>
                <param name="password" value="$(arg password)"/>
                <param name="cyclic_data_publish_rate" value="$(arg cyclic_data_publish_rate)"/>
                <param name="api_rpc_timeout_ms" value="$(arg api_rpc_timeout_ms)"/>
                <param name="api_session_inactivity_timeout_ms" value="$(arg api_session_inactivity_timeout_ms)"/>
                <param name="api_connection_inactivity_timeout_ms" value="$(arg api_connection_inactivity_timeout_ms)"/>
                <param name="default_goal_time_tolerance" value="$(arg default_goal_time_tolerance)"/>
                <param name="default_goal_tolerance" value="$(arg default_goal_tolerance)"/>
                <param name="arm" value="$(arg arm)"/>
                <param name="gripper" value="$(arg gripper)"/>
                <param name="dof" value="$(arg dof)"/>
                <param name="use_hard_limits" value="$(arg use_hard_limits)"/>
                <param name="robot_name" value="$(arg robot_name)"/>
                <param name="prefix" value="$(arg prefix)"/>
                <rosparam command="load" file="$(find kortex_description)/arms/$(arg arm)/$(arg dof)dof/config/joint_limits.yaml" subst_value="true"/>
                <!-- If there is a gripper, load the active joint names for it -->
                <rosparam command="load" file="$(find kortex_description)/grippers/$(arg gripper)/config/joint_limits.yaml" unless="$(eval not arg('gripper'))" subst_value="true"/>
            </node>

            <!-- Start joint and robot state publisher -->
            <node name="joint_state_publisher" pkg="joint_state_publisher" type="joint_state_publisher">
                <rosparam param="source_list">[base_feedback/joint_state]</rosparam>
                <param name="use_gui" value="false"/>
                <param name="rate" value="$(arg cyclic_data_publish_rate)" />
            </node>
            <node name="robot_state_publisher" pkg="robot_state_publisher" type="robot_state_publisher" />

        </group>

        <!-- ============================================== -->
        <!-- =================== COMMON =================== -->
        <!-- ============================================== -->

        <!-- Start MoveIt! main executable -->
        <group if="$(arg start_moveit)">

            <!-- TODO Find cleaner way to do that and that will work with other arms -->
            <!-- Without gripper -->
            <include file="$(find kortex_description)/../kortex_move_it_config/$(arg arm)_move_it_config/launch/move_group.launch" if="$(eval not arg('gripper'))"> 
                <arg name="dof" value="$(arg dof)"/>
                <arg name="use_hard_limits" value="$(arg use_hard_limits)"/>
                <arg name="prefix" value="$(arg prefix)"/>
            </include>
            <!-- With gripper -->
            <include file="$(find kortex_description)/../kortex_move_it_config/$(arg arm)_$(arg gripper)_move_it_config/launch/move_group.launch" unless="$(eval not arg('gripper'))"> 
                <arg name="dof" value="$(arg dof)"/>
                <arg name="use_hard_limits" value="$(arg use_hard_limits)"/>
                <arg name="prefix" value="$(arg prefix)"/>
            </include>

        </group>

        <!-- Move the simulated arm to home position -->
        <group if="$(arg sim)">
            <node name="home_the_arm" pkg="kortex_gazebo" type="home_robot.py" output="screen" respawn="false" launch-prefix="bash -c 'sleep $(arg start_delay_seconds); $0 $@'">
                <param name="robot_name" value="$(arg robot_name)"/>
            </node>
        </group>

    </group>

    <!-- Start RViz -->
    <node name="rviz" pkg="rviz" type="rviz" output="log" args="-f base_link -d $(find paul_bringup)/config/arm_cfg.rviz" if="$(arg start_rviz)"/>
    <!--include file="$(find gen3_lite_gen3_lite_2f_move_it_config)/launch/moveit_rviz.launch"/-->
  
</launch>
